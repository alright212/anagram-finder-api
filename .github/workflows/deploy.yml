name: Deploy Estonian Anagram Finder API to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: anagram-finder-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Ensure App Runner service is ready for deployment
        env:
          SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
        run: |
          echo "Checking App Runner service status..."
          
          # Wait for any existing operations to complete first
          SERVICE_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.Status' --output text)
          echo "Current service status: $SERVICE_STATUS"
          
          if [ "$SERVICE_STATUS" = "OPERATION_IN_PROGRESS" ]; then
            echo "Service has an operation in progress. Waiting for it to complete..."
            aws apprunner wait service-updated --service-arn $SERVICE_ARN
            echo "Previous operation completed."
          fi
          
          # Now check if service is in RUNNING state
          SERVICE_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.Status' --output text)
          echo "Service status after waiting: $SERVICE_STATUS"
          
          if [ "$SERVICE_STATUS" != "RUNNING" ]; then
            echo "Service is not in RUNNING state. Attempting to restart..."
            aws apprunner update-service --service-arn $SERVICE_ARN --auto-deployments-enabled
            echo "Service restart initiated. Waiting for it to reach RUNNING state..."
            aws apprunner wait service-running --service-arn $SERVICE_ARN
            echo "Service is now in RUNNING state."
          else
            echo "Service is ready for deployment."
          fi

      - name: Deploy to App Runner
        env:
          SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
        run: |
          echo "Starting App Runner deployment..."
          
          # Retry logic for deployment
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Deployment attempt $attempt of $max_attempts..."
            
            if aws apprunner start-deployment --service-arn $SERVICE_ARN; then
              echo "Deployment started successfully!"
              break
            else
              echo "Deployment attempt $attempt failed."
              if [ $attempt -eq $max_attempts ]; then
                echo "All deployment attempts failed. Exiting."
                exit 1
              fi
              
              echo "Waiting 30 seconds before retry..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done

      - name: Wait for deployment to complete
        env:
          SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
        run: |
          echo "Waiting for deployment to complete..."
          aws apprunner wait service-updated --service-arn $SERVICE_ARN
          echo "Deployment completed!"

      - name: Get service URL
        env:
          SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
        run: |
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
          echo "üöÄ API deployed successfully!"
          echo "üìç Service URL: https://$SERVICE_URL"
          echo "üìö API Documentation: https://$SERVICE_URL/api/documentation"
          echo "üìä API Stats: https://$SERVICE_URL/api/v1/anagrams/stats"
